■ Spring Bean Annotation
  -java 1.5 버전부터 가능하다
  
■ Spring framework를 이용하여 구현할 때 Annotation을 사용한다면 필수 설정 
  - 첫 번째
  - 두 번째
  - 세 번째 : <context:component-scan base-package= ""> annotation과 stereotype도 적용가능

■ stereotype annotation 선언되면 자동으로 해당 클래스가 bean으로 등록되어 사용되는 것
  - @Component : 스테레오 타입의 최상위 객체 <bean> 과 같다
  - @Controller : Spring MVC 개발에서 자동으로 Front Controller
  - @Service : 비지니스 로직으로 처리 Transaction 처리
  - @Repository : DAO(Mapper)
  ====> 클래스위에 해당 Annotation을 선언하면 자동으로 Bean으로 생성되고 Spring Contatiner가 관리하는 객체가 된다
        <context:component-scan 


■ org.springframework.stereotype / org.springframework.beans.factory.annotation / javax.annotation
  ● @Component
    패키지 : org.springframework.stereotype
    설명 : <bean> tag로 등록 => Spring Container가 사용할 수 있도록 bean으로 만들어준다
          일반 POJO 클래스에 @Component로 선언하면 자동으로 클래스가 bean이 된다
          해당 클래스 bean이 되면 이름(id)는 해당 클래스명의 camel case방식으로 자동 선언된다
          SingleTon이다. @Scope 통해서 필요시 사용범위도 선언가능  
  
  ●  @Autowired
     패키지 : org.springframework.beans.factory.annotation
     설명 : DI (Dependecy Injection)
     	   생성된 bean을 연결할 때 ref 속성을 통해서 연결하게 된다
     	   Annotation으로 생성된 bean을 클래스에 주입하여 사용할 때의 방법은
     	   생성자, Setter, 메소드, 멤버필드주입
     	   
     	   "타입"을 이용한 주입(by Type) : 검색순서가 타입->이름
     	   
     	   타입 bean이 자동으로 주입됨
     	   (주의사항 '객체가 없을때'와 객체가 1개 이상일 때' 오류를 발생시킨다)
     	   
     	   필수 객체의 주입이 아닌 경우 @Autowired(required=false)로 선언하여 객체가 null인 상태도 허용
     	   여러개의 같은 Bean타입이 존재한다면 @Qulifier를 작성 해야한다
     	   ex) @Autowired(required=false)
     	   	   @Qualifier("user01") // 생성되어 있는 bean중에서 이름(id or name) 'user01'인 bean을 찾아서 주입해준다
     	   	   private UserDto dto;
     	   	   
   ● @Qualifier
   	 패키지 : org.springframework.beans.annotation
   	 설명 : @Autowired가 타입기반의 주입을 하기 때문에 타입 검색전에 name을 검색하여 특정 bean을 주입하도록 선언	   	   
     	   	   
     	   	   
   ● @Resource
     패키지 : javax.annotation
     설명 : Spring framework이 아닌 Application 필요로 하는 자원을 자동으로 연결하기 위해서 사용
     ByName으로 bean을 연결한다  	   	   
     @Resource(name="name")	   	   
     	   	   
     	   	   